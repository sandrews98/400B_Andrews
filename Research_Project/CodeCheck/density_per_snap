#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Apr 22 15:08:23 2020

@author: samantha

Research Assignment:
    Topic: M33's Future Density Profile and Star Formation Rate
    
    Question 1: What can we infer about the SFR from the density profile? 
                Will there be a burst in star formation?

Equation to be used:
    Kennicutt Schmidt relation
    SFD = 2.5*10e(-4) (gas density / Msun / pc^2)^1.4 [Msun per year per kpc^2]
    
Gurtina's suggestion on how to measure SFR:

    1) Determine the real M33 gas mass
        https://ui.adsabs.harvard.edu/abs/2009ApJ...703.1486P/abstract
        
        1.4e9 M_sun at the distance of 730pc. The dependency is M_HI 
        proportional to D**2, so using the largest M33 distance of 
        964 kpc all H1 regions should be multiplied by 1.7. So total gas
        mass is 2.38e9 M_sun. 

    2) Figure out the mass *ratio* between gas and stars
        Homework 3 gave the disk mass of M33 to be 0.009e12 Msun, and the total
        mass to be 0.196e12 M_sun.
        ratio between gas and stars = gas / stars = gas / disk mass 
        (M33 doesn't have a bulge)
        ratio = 2.38e9 / 0.009e12 = 0.264

    3) make plots of the surface density of stars in M33 
        (mass/area as a function of radius).  Translate that into gas surface 
        density using the ratio between gas and stars from #2 

    4) Use the Kennicutt Schmidt relation to translate the gas density into a 
        star formation rate. 
         \Sigma_{SFR} = (2.5 \pm{0.7}) \times 10^{-4} (\frac{\Sigma_{gas}}{1 M_{sun} pc^{-2}})^{1.4 \pm{0.15}} M_{sun} yr^{-1} kpc^{-2}
         
         From Kennicutt 1997: https://arxiv.org/abs/astro-ph/9712213

    5)[ if you have time ] 
        You can even then use that star formation rate at each point in the 
        orbit to decrease the gas mass at each point in time and determine 
        when you think all the gas would be used up by. 
    
Methods:
    => Similar to Lab 6: 
        create a function to calculate the surface density profile for disks
        n = 1 for spiral galaxies --> M33 is currently a gas rich late type 
        spiral that could evolved into a gas poor spiral or elliptial once
        M31 and MW collide. n = 4 for ellipical galaxies
        
        also make stellar disk density profile as a function of time
        
    => translate into gas surface density
    
    => translate the gas surface density into a SFR
    
    => determine when gas would be used up
    

Below is Rixin's code modified for M33 and with a portion added to calculate 
densities, star formation density and SFR
will plot the density, star formation density, and star formation rate
as a funcion of time
"""

# import necessary modules
# numpy provides powerful multi-dimensional arrays to hold and manipulate data
import numpy as np
# astropy provides unit system and constants for astronomical calculations
import astropy.units as u
import astropy.constants as c
# import previous HW functions
from RL_ReadFile import Read
# matplotlib provides powerful functions for plotting figures
import matplotlib.pyplot as plt
import matplotlib.pylab as pylab
# Plotly's Python graphing library makes interactive, publication-quality graphs
import plotly.graph_objects as plygo

# nbagg is the matplotlib backend for interactive plotting in notebooks
#%matplotlib nbagg

#####################################################
### Modified Center of Mass with VolDec from HW 6 ###
#####################################################

class CenterOfMass:
    """ Hold the COM position & velocity of a galaxy at a given snapshot """
    
    def __init__(self, filename, ptype):
        """ Initialize this class with relevant data """
        
        # read in the file
        self.time, self.total, self.data = Read(filename)
        
        # extract particles with the desired type
        self.par_data = self.data[self.data['type'] == ptype]
        
        # extract the mass, positions, and velocities of particles of interest
        self.m = self.par_data['m']
        self.r = self.par_data['r']
        self.v = self.par_data['v']
        
    def COMdefine(self, q, m):
        """ Return the mass-weighted mean position(q) in a given phase space """
        
        # because q has the shape of (total, 3) and m has the shape of (total,)
        # we need to give m a virtual axis to broadcast array operations;
        # then we sum along axis 0 (i.e., sum up all particles)
        # this function will then return a 3-element array
        return np.sum(q * m[:, np.newaxis], axis=0) / np.sum(m)
        
    def COM_P(self, delta, VolDec):
        """ Iteratively determine the COM position """
        
        # get the first COM guess by calling COMdefine on all particles
        COM_r = self.COMdefine(self.r, self.m)
        # calculate the magnitude of the COM position vector
        COM_r_mag = np.sqrt(np.sum(COM_r**2))
        
        # calculate the coordinates of particles in the new COM reference frame
        par_r = self.r - COM_r
        par_r_mag = np.sqrt(np.sum(par_r**2, axis=1))
        par_m = self.m
        
        # use a reduced distance of the farthest particle for new calculations
        par_r_max = max(par_r_mag) / VolDec
        # create a guess list of the COM position vectors
        COM_r_list = []; COM_r_list.append(COM_r)
        # choose an initial estiamte for the change in COM position
        change = 1000.0
        
        # now iterative the following process to determine the COM
        while change > delta:
            
            # extract the particles within the reduced volume
            par_r = par_r[par_r_mag < par_r_max]
            par_m = par_m[par_r_mag < par_r_max]
            
            # get the new COM guess based on remaining particles and append it
            COM_r = self.COMdefine(par_r, par_m)
            COM_r_mag = np.sqrt(np.sum(COM_r**2))
            COM_r_list.append(COM_r)
            
            # COM_r_mag is exactly the change in COM position
            # between the previous guess and this guess
            change = COM_r_mag
            #print(COM_r, change) # if interested, print them out
            
            # prepare for the next round of calculations
            par_r_max /= VolDec # shrink the volume radius again
            par_r = par_r - COM_r # shift particles to the new reference frame
            par_r_mag = np.sqrt(np.sum(par_r**2, axis=1)) # get new magnitudes
        
        # Note: each COM guess is in the reference frame of the previous guess
        COM_r_list = np.asarray(COM_r_list) # convert array list to a 2d array
        # convert each guess back to the original coordinate system
        COM_r_list = np.cumsum(COM_r_list, axis=0)
        
        # return the final guess of COM position vector (round it and add units)
        return np.round(COM_r_list[-1], 2) * u.kpc
    
    def COM_V(self, COM_r):
        """ Return the COM velocity based on the COM position """
        
        # the max distance from the COM_r 
        # that we will use to determine the COM velocity
        RV_MAX = 15.0 * u.kpc
        
        # calculate the coordinates of particles in the new COM reference frame
        # since COM_r has units, further calculations need to be dimensional
        par_r = self.r * u.kpc - COM_r
        par_r_mag = np.sqrt(np.sum(par_r**2, axis=1))
        
        # extract the particle properties within the max distance
        par_v = self.v[par_r_mag < RV_MAX]
        par_m = self.m[par_r_mag < RV_MAX]
        
        # calculate the COM velocity
        COM_v = self.COMdefine(par_v, par_m)
        
        # return the COM velocity (round it and add units)
        return np.round(COM_v, 2) * u.km/u.s    
    
###############################################################    
### Rotate frame to align with the Angular Momentum (Lab 7) ###
###############################################################
        
# a function that will rotate the position and velocity vectors
# so that the disk angular momentum is aligned with z axis. 
# reference: https://math.stackexchange.com/a/476311/738155

def RotateFrame(posI, velI):
    # input:  3D array of positions and velocities
    # returns: 3D array of rotated positions and velocities such that j is in z direction

    # compute the angular momentum
    L = np.sum(np.cross(posI, velI), axis=0)
    # normalize the vector
    L_norm = L / np.sqrt(np.sum(L**2))

    # Set up rotation matrix to map L_norm to z unit vector (disk in xy-plane)
   
    # z unit vector and Identity matrix
    z_norm = np.array([0, 0, 1])
    I = np.array([[1, 0, 0], [0, 1, 0], [0, 0, 1]])
    
    # cross product between L and z
    vv = np.cross(L_norm, z_norm)
    s = np.sqrt(np.sum(vv**2))
    
    # dot product between L and z 
    cindex = np.dot(L_norm, z_norm)
    
    # two special cases need attentions
    if cindex == 1: # when L_norm points the same direction as z_norm
        R = I
    elif cindex == -1: # when L_norm and z_norm point into exactly opposite directions
        # a rotation of pi about any axis perpendicular to z_norm works
        R = np.array([[1, 0, 0], [0, -1, 0], [0, 0, -1]]) # here it is about x-axis
    else:    
        # rotation matrix
        v_x = np.array([[0, -vv[2], vv[1]], [vv[2], 0, -vv[0]], [-vv[1], vv[0], 0]])
        R = I + v_x + np.dot(v_x, v_x) * (1 - cindex) / s**2

    # Rotate coordinate system
    pos = np.dot(R, posI.T).T
    vel = np.dot(R, velI.T).T
    
    return pos, vel

######################################
### Surface Density Radial Profile ###
######################################
    
class SurfaceDensityProfile:
    """ calculate the surface density profile of a galaxy at a snapshot """
    
    def __init__(self, data_dir, galaxy, snap_id, radii=None):
        """ initialization
        input:
            galaxy: the name of the galaxy of interest
            snap_id: the number of the snapshot of interest
            radii: an array of radii from a near-center point to the outer skirt
                   default value: np.arange(0.1, 0.95*r_outermost, 1.0)
                   feel free to choose a finer step length for high resolution data
        """
    
        # compose the data filename to read
        self.filename = data_dir + galaxy + "_{:03d}".format(snap_id) + ".txt"
        
        # set tolerance and VolDec for calculating COM_P in CenterOfMass
        delta, VolDec = 0.1, 2.0
        if galaxy == "M33": # for M33 that is stripped more, use different values
            delta, VolDec = 0.1, 4.0
        
        # calculate the COM position and velocity
        # N.B.: self.com contains lots of info, see its member variables in the definition above
        self.com = CenterOfMass(self.filename, 2)
        com_r = self.com.COM_P(delta, VolDec)
        com_v = self.com.COM_V(com_r)
        self.com_r, self.com_v = com_r.value, com_v.value # remove the units for convenience

        # rotate the frame to align the disk with angular momentum
        # note that self.com.r is the position vectors of all disk particles in the original frame
        #       and self.com.v is the velocity vectors of all disk particles in the original frame
        self.alg_r, self.alg_v = RotateFrame(self.com.r - self.com_r, self.com.v - self.com_v)
        # calculate the radial distances and azimuthal angles in the cylindrical coordinates
        #print("alg_r = ",self.alg_r)
        #print("alg_r [:,:2]=",self.alg_r[:,:2])
        self.cyl_r_mag = np.sqrt(np.sum(self.alg_r[:, :2]**2, axis=1))
        #print("sum of cyl_r_mags=",np.sum(self.cyl_r_mag))
    
        self.cyl_theta = np.arctan2(self.alg_r[:, 1], self.alg_r[:, 0])
#        print("cyl_r_mag.max()=",self.cyl_r_mag.max())
        # check if radii is already set
        if radii is None:
            self.radii = np.arange(0.1, 0.95 * self.cyl_r_mag.max(), 0.1)
            #print(self.radii.size)
        else:
            self.radii = radii
            # can be improved by checking how many elements "radii" has
        #print("radii=",radii)
        # create the mask to select particles for each radius
        # np.newaxis creates a virtual axis to make tmp_r_mag 2 dimensional
        # so that all radii can be compared simultaneously
        enc_mask = self.cyl_r_mag[:, np.newaxis] < np.asarray(self.radii).flatten()
        # calculate the enclosed masses within each radius
        # relevant particles will be selected by enc_mask (i.e., *1)
        # outer particles will be ignored (i.e., *0)
        self.m_enc = np.sum(self.com.m[:, np.newaxis] * enc_mask, axis=0)

        # use the difference between nearby elements to get mass in each annulus
        # N.B.: we ignored the very central tiny circle and a small portion of outermost particles
        #       feel free to modify it to fit your needs
        self.m_annuli = np.diff(self.m_enc) # this array is one element less then m_enc
        
        # calculate the surface density by dividing the area of the annulus
        self.Sigma = self.m_annuli / (np.pi * (self.radii[1:]**2 - self.radii[:-1]**2))
        
        # we use the geometric mean of two consecutive elements in "radii" as the radius of each annulus
        # this array have the same amount of elements as self.Sigma, can be used for plotting
        self.r_annuli = np.sqrt(self.radii[1:] * self.radii[:-1])
        
###############################
### New Part of Code Starts ###
###############################        
def Densities(galaxy, start, end, n):
    # Inputs:
    #   galaxy = the name of the galaxy
    #   start = the number of the first snapshot to be read in
    #   end = the number of the last snapshot to be read in
    #   n = an integer indicating the intervals over which COM is returned
    # Outputs:
    #   computes the densities of a given galaxy in each snapshot
    #   computes time in Gyr based off the snapshots
    #   also returns snap_ids
    # function that loops over all the desired snapshots to compute the COM pos and vel as a function of time.
    print("OrbitCom")
        
    # generate the snapshot id sequence 
    snap_ids = np.arange(start, end, n)
    x_axis = np.zeros(len(snap_ids)) # x-axis will be the snap ids converted to time
    #print(x_axis)
    #check if eligible
    if len(snap_ids) == 0:
        print("Invalid snap ID start and end")
        return
    
    # initialize the array for densities and SFR
    avg_density = np.zeros((len(snap_ids), 5))
    gas_density = np.zeros((len(snap_ids), 5))
    SFD = np.zeros((len(snap_ids), 5))
    SFR = np.zeros((len(snap_ids), 5))
    #print(density)
    # a for loop to read in each snap and get a density and area
    i = 0
    j = 0
    snap_id  = 0
    for i, snap_id in enumerate(snap_ids): # loop over files
        
        # compose the data filename (be careful about the folder)
        directory  = "/Users/samantha/Documents/400b/400B_Andrews/Homeworks/Homework6/"
        
        sdp1 = SurfaceDensityProfile(directory, "M33", snap_id)
        # find average stellar disk density for segmants of the area
        # the segmants are in 2's from 0-10 kpc
        ri = 0
        nexti = 2
        while nexti < 10.01:
            getindex = np.where(((sdp1.radii>ri) & (sdp1.radii<=nexti))) #find values between range of radii
            density = np.mean(sdp1.Sigma[getindex])*10e10
            avg_density[snap_id,j] = density # take average
            
            # convert stellar disk density to gas density
            density_pc = density*(u.Msun/u.kpc**2).to(u.Msun/u.pc**2) # convert kpc^2 to pc^2
            gas_density[snap_id, j] = density_pc*0.264
            
            #convert gas density to star formation density using Kennicutt Schmidt relation
            SFD_val = 2.5*10**(-4)*(density_pc*0.264)**1.4

            SFD[snap_id, j] = SFD_val # M_sun yr^-1 kpc^-2
            
            # convert SFD to SFR by multiplying it by its respective radius
            SFR[snap_id, j] = SFD_val * np.pi * nexti**2
            
            ri += 2
            j += 1
            nexti += 2
            
        x_axis[i]=sdp1.com.time.value/1e3 # convert snapshot to Gyr
        #print("x_axis[i]",x_axis[i])
        
        # print snap_id to see the progress
        #print(snap_id)
        i += 1
        snap_id += 1
        j = 0
    return x_axis, avg_density, gas_density, SFD, SFR

# plot how the density of M33 changes as time goes on
# call function
x_axis, avg_density, gas_density, SFD, SFR = Densities("M33", 0, 802, 1)


# Plots
params = {'legend.fontsize': 'x-large',
          'figure.figsize': (9, 8),
         'axes.labelsize': 'x-large',
         'axes.titlesize':'x-large',
         'xtick.labelsize':'x-large',
         'ytick.labelsize':'x-large'}
pylab.rcParams.update(params)

# average density for each radius as a function of time
fig, ax = plt.subplots(figsize=(9, 8))
ax.semilogy(x_axis, avg_density[:,0], label="0-2 kpc")
ax.semilogy(x_axis, avg_density[:,1], label="2-4 kpc")
ax.semilogy(x_axis, avg_density[:,2], label="4-6 kpc")
ax.semilogy(x_axis, avg_density[:,3], label="6-8 kpc")
ax.semilogy(x_axis, avg_density[:,4], label="8-10 kpc")
ax.set(xlabel="Time [Gyr]", ylabel=r"$\Sigma$(disk) [$M_\odot$ / kpc$^2$]")
ax.legend(loc='best'); fig.tight_layout()
fig.savefig('M33 Disk Density vs Time ', dpi = 350)
plt.show()


# average gas density for each radius as a function of time
fig, ax = plt.subplots(figsize=(9, 8))
ax.semilogy(x_axis, gas_density[:,0], label="0-2 kpc")
ax.semilogy(x_axis, gas_density[:,1], label="2-4 kpc")
ax.semilogy(x_axis, gas_density[:,2], label="4-6 kpc")
ax.semilogy(x_axis, gas_density[:,3], label="6-8 kpc")
ax.semilogy(x_axis, gas_density[:,4], label="8-10 kpc")
ax.set(xlabel="Time [Gyr]", ylabel=r"$\Sigma$(disk) [$M_\odot$ / kpc$^2$]")
#ax.legend(loc='best'); fig.tight_layout()
fig.savefig('M33 Gas Density vs Time ', dpi = 350)
plt.show()


# SFD for each radius as a function of time
fig, ax = plt.subplots(figsize=(9, 8))
ax.semilogy(x_axis, SFD[:,0], label="0-2 kpc")
ax.semilogy(x_axis, SFD[:,1], label="2-4 kpc")
ax.semilogy(x_axis, SFD[:,2], label="4-6 kpc")
ax.semilogy(x_axis, SFD[:,3], label="6-8 kpc")
ax.semilogy(x_axis, SFD[:,4], label="8-10 kpc")
ax.set(xlabel="Time [Gyr]", ylabel=r"SFD [$M_\odot$ yr$^{-1}$ kpc${-2}$]")
#ax.legend(loc='best'); fig.tight_layout()
fig.savefig('M33 SFD vs Time ', dpi = 350)
plt.show()

# SFR for each radius as a function of time
fig, ax = plt.subplots(figsize=(9, 8))
ax.semilogy(x_axis, SFR[:,0])
ax.semilogy(x_axis, SFR[:,1])
ax.semilogy(x_axis, SFR[:,2])
ax.semilogy(x_axis, SFR[:,3])
ax.semilogy(x_axis, SFR[:,4])

# lines to mark where each close encounter occurs (from close_encounters.py)
ax.axvline(x=0.929, color='black', label='Close Encounters')
ax.axvline(x=4.286, color='black')
ax.axvline(x=6.714, color='black')
ax.axvline(x=8.286, color='black')
ax.axvline(x=9.571, color='black')
ax.axvline(x=10.571, color='black')


ax.set(xlabel="Time [Gyr]", ylabel=r"SFR [$M_\odot$ / yr$^1$]")
ax.legend(loc='best'); fig.tight_layout()
fig.savefig('M33 SFR vs Time ', dpi = 350)
plt.show()
