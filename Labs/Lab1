#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Jan 28 14:03:35 2020

@author: samantha
"""

# coding: utf-8

# # In Class Lab 1
# 
# ## Part A:  The Local Standard of Rest
# Proper motion of Sgr A* from Reid & Brunthaler 2004
# $\mu = 6.379$ mas/yr 
# 
# Peculiar motion of the sun, $v_\odot$ = 12.24 km/s  (Schonrich 2010)
# 
# 
# $v_{tan} = 4.74 \frac{\mu}{\rm mas/yr} \frac{R_o}{\rm kpc} = V_{LSR} + v_\odot$
# 
# 
# ### a)
# 
# Create a function called VLSR to compute the local standard of res (V$_{LSR}$).
# 
# The function should take as input: the solar radius (R$_o$), the proper motion (mu)
# and the peculiar motion of the sun in the $v_\odot$ direction.
# 
# Compute V$_{LSR}$ using three different values R$_o$: 
# 1. Water Maser Distance for the Sun :  R$_o$ = 8.34 kpc   (Reid 2014 ApJ 783) 
# 2. GRAVITY Collaboration Distance for the Sun:  R$_o$ = 8.178 kpc   (Abuter+2019 A&A 625)
# 3. Value for Distance to Sun listed in Sparke & Gallagher : R$_o$ = 7.9 kpc 
# 

#define a fuction for VLSR: compute local standard of rest velocity

# $v_{tan} = 4.74 \frac{\mu}{\rm mas/yr} \frac{R_o}{\rm kpc} = V_{LSR} + vsun
#VLSR = 4.74 * mu * R - v_sun

def VLSR(Ro, mu = 6.379, vsun = 12.24):
    #Inputs:
    #R_0 = distance from the sun to the galactic center (kpc)
    #mu = proper motion of Sag A* (mas/yr) : Default from Reid & Brunthaler 2004
    #vsun is the peculiar motion of the sun in the v-direction (km/s) : Default is from Schonrich+2010
    #Returns:
    #VLS, the local standard of rest (km/s)
    
    return 4.74 * mu * Ro - vsun

RoReid = 8.34 #distance to Galactic Center from Reid et al. 2014 in kpc
RoGravity = 8.178 #distance to Galactic Center from Gravity Collaboration Abuter+2019
RoSG = 7.9 #Distance to Galactic center from textbook by Sparke & Gallagher

#Compute VLSR using Reid 2014 value for Ro
VLSR_Reid = VLSR(RoReid)
print(VLSR_Reid)
#Compute VLSR using Gravity Abuter+2019 value for Ro
VLSR_Gravity = VLSR(RoGravity)
print(VLSR_Gravity)

#Compute VLSR using textbook Sparke & Gallagher value for Ro
VLSR_SG = VLSR(RoSG)
print(VLSR_SG)
# In[ ]:


import numpy as np
import math

# ### b)
# 
# compute the orbital period of the sun using R$_o$ from the GRAVITY Collaboration (assume circular orbit)
# 
# Note that 1 km/s ~ 1kpc/Gyr
"""
orbital period of the Sun using Ro from Gravity collab
T = 2piR/V -- units . kcp / (km/s) ~ (kpc/Gyr) ~ Gyr
V = Vtan = VLSR + Vsun
"""
Vtan = VLSR_Gravity + 12.24
T_Grav = 2 * np.pi * RoGravity / Vtan
print(T_Grav) #orbital period in Gyr

# ### c)
# 
# Compute the number of rotations about the GC over the age of the universe (13.8 Gyr)

"""
determineing number of rotations about galactic center
age of universe / orbital period 
"""
print(13.8 / T_Grav)

# ## Part B  Dark Matter Density Profiles
# 
# ### a)
# Try out Fitting Rotation Curves 
# [here](http://wittman.physics.ucdavis.edu/Animations/RotationCurve/GalacticRotation.html)
# 
# 
# ### b)
# 
# In the Isothermal Sphere model, what is the mass enclosed within the solar radius (R$_o$) in units of $10^{10}$ M$_\odot$? 
# rotation curve for this model was completely flat
# Recall that for the Isothermal sphere :
# $\rho(r) = \frac{V_{LSR}^2}{4\pi G r^2}$
# 
#Gravitational Const
G = 4.4988e-6 #kpc^3/Gyr^2/Msun

"""
function below willcompute mass enclosed w/in a given radius assuming an 
Isothermal sphere model.
density profile rho = VLSR^2 / (4*pi*G*R^2)
Mass = Integrate rho dV
    Integrate rho 4*pir^2dr
    Integrate VLSR^2 / (4*pi*G*r^2) * 4*pi*r^2 dr
    Integrate VLSR^2 / G dr
    VLSR^2/G * r
"""
def MassIso(r, VLSR = 235):
    #Inputs:
    #   VLSR is the local standard of rest (km/s); using default VLSR from Gravity Collab
    #   r is the distance from the Galactic Center (kpc)
    #Returns:
    #   mass enclosed in Msun
    return VLSR**2 / G * r
#Compute mass enclosed w/in Ro
MIsoSolar = MassIso(RoGravity)
print(MIsoSolar/1e10) #units of 1e10 Msun


# Where $G$ = 4.4988e-6 kpc$^3$/Gyr$^2$/M$_\odot$

#G = 4.988 * 10**(-6) #kpc**2 / Gyr **2 / M_sol
#r = 8.178

#M_sphere = (VLSR(8.178, mu, vsun))**2 / (G * r)


# 
# What about at 260 kpc (in units of 10$^{12}$ M$_\odot$) ? 
"""
Compute mass enclosed w/in 260kpc
"""
MIso260 = MassIso(260)
print(MIso260/1e12)

# ## c) 
# 
# The Leo I satellite is one of the fastest moving satellite galaxies we know. 
# 
# 
# It is moving with 3D velocity of magnitude: Vtot = 196 km/s at a distance of 260 kpc (Sohn 2013 ApJ 768)
# 
# If we assume that Leo I is moving at the escape speed:
# 
# $v_{esc}^2 = 2|\Phi| = 2 \int G \frac{\rho(r)}{r}dV $ 
# 
# and assuming the Milky Way is well modeled by a Hernquist Sphere with a scale radius of $a$= 30 kpc, what is the minimum mass of the Milky Way (in units of $10^{12}$ M$_\odot$) ?  
# 
"""
Potential for the Hernquist Sphere:
    Phi = - G * M / (r + a)
    a = scale radius at which density changes
    a = 30 kcp for the purposes of this lab
Using Hernquist potential, the equation for the escape speed becomes:
    Vesc^2 = 2 * G * M / (r + a)
    solving for mass:
        M = (r + a) Vesc^2 / (2 * G)
          = 196^2 / 2G * (260 + 30)
Function will determine the total halo mass needed to set a given escape 
at a given distacne assuming Hernquist profile for the dark matter halo
"""
def MassFromVesc(Vesc, a, r):
    """
    Inputs:
        vesc is the escape speed in km/s (speed of satellite)
        r is the distance to the galactic center in kpc
        a is the Hernquist scale length in kcp
    Returns:
        the total mass in solar masses
    """
    return Vesc**2/2/G*(r+a)

#mass needed to keep Leo I bound assuming a Hernquist Profile
MLeoI = MassFromVesc(196, 30, 260)
print(MLeoI/1e12)

# How does this compare to estimates of the mass assuming the Isothermal Sphere model at 260 kpc (from your answer above)
print(MIso260/MLeoI)




